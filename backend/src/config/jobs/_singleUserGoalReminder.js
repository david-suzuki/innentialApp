import { User, Goal, UserContentInteractions } from '~/models'
import {
  sendEmail,
  appUrls,
  sentryCaptureException,
  activateGoalsReminder
} from '~/utils'

const jobName = 'singleUserGoalReminder'

const appLink = `${appUrls['user']}`

const callback = async (job, done) => {
  const today = new Date().getDay()
  const [sunday, saturday] = [0, 6]

  if (today === sunday) {
    job.schedule('tomorrow')
    job.save()
    done()
    return
  }
  if (today === saturday) {
    job.schedule('in two days')
    job.save()
    done()
    return
  }

  if (job.attrs) {
    const {
      priority,
      data: { user }
    } = job.attrs

    const userData = await User.findById(user).lean()

    if (userData) {
      try {
        const { _id } = userData

        const contentProfile = await UserContentInteractions.findOne({
          user: _id
        })
          .select({ _id: 1, isReceivingContentEmails: 1 })
          .lean()

        if (!contentProfile || !contentProfile.isReceivingContentEmails) {
          return null
        }

        const activeAndRFRGoal = await Goal.findOne({
          user,
          status: { $ne: 'DRAFT' }
        })
          .select({ _id: 1 })
          .lean()

        if (!activeAndRFRGoal) {
          const nOfDrafts = await Goal.countDocuments({
            user,
            status: 'DRAFT'
          })

          if (nOfDrafts > 0) {
            // USER HAS NO GOALS ACTIVE, BUT HAS DRAFTS
            const { email, firstName } = userData
            const ownGoal = await Goal.findOne({
              user,
              status: 'DRAFT',
              autogenerated: false
            })
              .select({ _id: 1 })
              .lean()
            const goalsSet = !!ownGoal // USER HAS OWN GOALS CREATED

            await sendEmail(
              email,
              'Action required: activate your goals!',
              activateGoalsReminder({
                name: firstName,
                nOfDrafts,
                goalsSet,
                appLink
              })
            )
          }
        } else {
          // USER HAS GOALS ACTIVE OR SET FOR REVIEW, THE JOB IS NO LONGER NEEDED
          done()
          await job.remove()
          return
        }
      } catch (err) {
        sentryCaptureException(err)
        job.fail(err)
        job.save()
        done()
        return
      }
    } else {
      job.fail(new Error(`No user data found for ID:${user}`))
      job.save()
      done()
      return
    }

    // I USE PRIORITY AS A WAY TO TELL HOW MANY TIMES A SINGLE JOB HAS RAN,
    // AND TO SCHEDULE THE NEXT NOTIFICATION ACCORDINGLY
    switch (priority) {
      case 0:
        // JOB HAS RAN ONCE
        job.priority(10)
        job.schedule('tomorrow')
        job.save()
        break
      case 10:
        // JOB HAS RAN TWICE
        job.priority(20)
        job.schedule('in 3 days')
        job.save()
        break
      case 20:
        // JOB HAS RAN THRICE
        job.priority(-10)
        job.schedule('in a week')
        job.save()
        break
      default:
        // JOB HAS RAN THREE TIMES, NO FURTHER NOTIFICATIONS TO SEND
        try {
          done()
          await job.remove()
        } catch (err) {
          console.error(err)
        }
        break
    }
  }
  done()
}

export default {
  jobName,
  callback,
  // interval: null,
  // options: { timezone: 'Europe/Berlin' },
  type: 'normal'
}

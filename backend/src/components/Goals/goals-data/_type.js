import {
  Skills,
  User,
  Goal,
  DevelopmentPlan,
  Review,
  UserEvaluation
} from '~/models'

export const types = `
  type UserGoalInfo {
    _id: ID!
    reviewName: String
    userName: String!
    active: Boolean
    nextReviewId: ID
    goals: [Goal]
    goalsCompleted: Boolean
    nextGoals: [Goal]
    skillProgression: [SkillProgression]
    reviewId: ID
    templateId: ID
    oneTimeReview: Boolean
    feedback: String
    feedbackFromOthers: [TextFeedback!]
  }

  type Goal {
    _id: ID!
    goalName: String!
    goalType: String!
    relatedSkills: [Skill]
    skills: [SkillResult]
    measures: [Measure]
    feedback: String
    status: String
    developmentPlan: DevelopmentPlan
    createdAt: DateTime
    endsAt: DateTime
    setBy: ID
    user: ID
    owner: User
    reviewId: ID
    autogenerated: Boolean
    isPrivate: Boolean
    isUserOnlyGoal: Boolean
    finishedPath: LearningPath
    fromPath: LearningPath
    learningPathIndex: Int
    isSelectedGoal: Boolean
  }

  type UserResult {
    _id: ID!
    user: User
    reviewedAt: DateTime
    reviewer: String
    goalsReviewed: [Goal]
    goalsSet: [Goal]
    skillProgression: [SkillProgression]
    feedback: String
  }

  type SkillResult {
    _id: ID!
    skillId: ID!
    skillName: String!
    level: Int
    related: Boolean
  }

  type Measure {
    _id: ID!
    measureName: String!
    completed: Boolean
    successRate: Int
  }

  type SkillProgression {
    _id: ID!
    skillName: String!
    oldValue: Float!
    newValue: Float!
  }

  type GoalStats {
    _id: ID!
    draft: Int
    review: Int
    active: Int
    completed: Int
    privateGoal: Int
    teamName: String!
  }
`

export const typeResolvers = {
  UserGoalInfo: {
    feedbackFromOthers: async ({ _id: user, createdAt }) => {
      const userEvaluation = await UserEvaluation.findOne({ user })
        .select({ feedback: 1 })
        .lean()
      if (userEvaluation) {
        const { feedback = [] } = userEvaluation
        return feedback.filter(
          ({ evaluatedAt }) => new Date(evaluatedAt) >= new Date(createdAt)
        )
      }
      return []
    }
  },
  Goal: {
    // isPrivate: ({ isPrivate }) => {
    //   return isPrivate
    // },
    endsAt: async ({ deadline, reviewId, reviewedAt }) => {
      if (reviewedAt) return reviewedAt
      const review = await Review.findById(reviewId)
        .select({ startsAt: 1, closedAt: 1 })
        .lean()
      if (review) {
        if (review.closedAt) {
          return review.closedAt
        } else return review.startsAt
      }
      if (deadline) return deadline
      return null
    },
    relatedSkills: async ({ relatedSkills: skillIds }) => {
      const relatedSkills = await Skills.find({ _id: { $in: skillIds } })
      return relatedSkills
    },
    fromPath: async ({ fromTemplate }, _, { dataSources }) => {
      return dataSources.LearningPath.getOne({
        goalTemplate: fromTemplate
      })
    },
    learningPathIndex: async ({ fromTemplate }, _, { dataSources }) => {
      const lp = await dataSources.LearningPath.getOne({
        goalTemplate: fromTemplate
      })
      if (lp) {
        const ix = lp.goalTemplate.findIndex(
          templateId => String(fromTemplate) === String(templateId)
        )
        return ix + 1
      }
      return null
    },
    owner: async ({ user: userId }) => {
      const user = await User.findById(userId)
      return (
        user || {
          _id: 'user_deleted',
          firstName: 'User',
          lastName: 'not found'
        }
      )
    },
    isUserOnlyGoal: async ({ user }) => {
      const activeGoals = await Goal.countDocuments({
        user,
        status: 'ACTIVE'
      })
      return activeGoals === 0
    },
    finishedPath: async ({ finishedPath }, _, { dataSources }) =>
      dataSources.LearningPath.getOne({
        _id: finishedPath
      }),
    // active: async ({ reviewedAt }) => {
    //   if (reviewedAt) return false
    //   return true
    // },
    developmentPlan: async ({ _id: goalId, user }) => {
      // the above might be also
      // developmentPlan: async ({ _id: goalId }, _, { user }) => {
      const devPlan = await DevelopmentPlan.findOne({
        user,
        active: true
      }).lean()

      if (!devPlan) return null
      const filteredContent = devPlan.content.filter(
        c => String(goalId) === String(c.goalId)
      )
      const filteredMentors = devPlan.mentors.filter(
        m => String(goalId) === String(m.goalId)
      )

      return {
        ...devPlan,
        _id: `${devPlan._id}:${goalId}`,
        content: filteredContent,
        mentors: filteredMentors
      }
    },
    isSelectedGoal: async ({ _id: goalId, user }) => {
      const devPlan = await DevelopmentPlan.findOne({
        user,
        selectedGoalId: goalId
      })
        .select({ _id: 1 })
        .lean()
      return !!devPlan
    }
    // hasPlannedContent: async ({ _id }) => {
    //   const content = await DevelopmentPlan.find({ 'content.goalId': _id })
    //   return content.length > 0
    // }
  },
  UserResult: {
    user: async ({ user: userId }) => {
      const user = await User.findById(userId).lean()
      return user
    },
    reviewer: async ({ reviewer }) => {
      const user = await User.findById(reviewer)
      if (user)
        return `${user.firstName}${user.lastName ? ' ' + user.lastName : ''}`
      return 'User deleted'
    },
    goalsReviewed: async ({ goalsReviewed }) => {
      const goals = await Goal.find({ _id: { $in: goalsReviewed } })
      return goals
    },
    goalsSet: async ({ goalsSet }) => {
      const goals = await Goal.find({ _id: { $in: goalsSet } })
      return goals
    }
  },
  SkillResult: {
    _id: ({ skillId }) => Math.random(), // todo: fix for proper id
    skillName: async ({ skillId }) => {
      const skill = await Skills.findById(skillId)
      if (skill) return skill.name
      return 'Unknown skill'
    }
  },
  SkillProgression: {
    skillName: async ({ _id }) => {
      const skill = await Skills.findById(_id)
      if (skill) return skill.name
      return 'Unknown skill'
    }
  }
}

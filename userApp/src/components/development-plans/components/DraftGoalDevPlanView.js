import React from 'react'
import { Carousel, GoalItem, Statement } from '../../ui-components'
import { /* MessageBox, */ Notification, Button } from 'element-react'
import { /* Query, */ Mutation } from 'react-apollo'
import {
  /* fetchUserGoals, */ deleteGoal /*, setGoalStatus */
} from '../../../api'
import { /* LoadingSpinner, */ captureFilteredError } from '../../general'
import history from '../../../history'
// import { getGoalOptions } from '../../goals/utils/_getOptions'
import { Link } from 'react-router-dom'

const arrowStyle = {
  position: 'relative',
  top: '100px',
  right: '15px',
  backgroundColor: '#e7e6ff',
  color: '#5a55ab',
  padding: '4px',
  borderRadius: '50%',
  cursor: 'pointer'
}

const handleDeletion = (mutate, goalId) => {
  // MessageBox.confirm(
  //   `This cannot be undone`,
  //   `Are you sure you want to delete the goal?`,
  //   {
  //     confirmButtonText: 'OK',
  //     cancelButtonText: 'Cancel',
  //     type: 'warning'
  //   }
  // )
  //   .then(() => {
  mutate({
    variables: {
      goalId
    }
  })
    .then(({ data: { deleteGoal: response } }) => {
      if (response !== null) {
        Notification({
          type: 'success',
          message:
            'Draft has been removed. We will try to improve our suggestions in the future',
          duration: 2500,
          offset: 90
        })
      } else {
        Notification({
          type: 'warning',
          message: 'Oops, something went wrong!',
          duration: 2500,
          offset: 90
        })
      }
    })
    .catch(e => {
      captureFilteredError(e)
      Notification({
        type: 'warning',
        message: 'Oops, something went wrong!',
        duration: 2500,
        offset: 90
      })
    })
  // })
  // .catch(() => { })
}

// const handleMutating = (mutate, variables) => {
//   const { status } = variables
//   const executeMutation = () => {
//     mutate({
//       variables
//     })
//       .then(({ data: { setGoalStatus: response } }) => {
//         if (response !== null) {
//           Notification({
//             type: 'success',
//             message: 'Goal updated!',
//             duration: 2500,
//             offset: 90
//           })
//         } else {
//           Notification({
//             type: 'warning',
//             message: 'Oops, something went wrong!',
//             duration: 2500,
//             offset: 90
//           })
//         }
//       })
//       .catch(e => {
//         captureFilteredError(e)
//         Notification({
//           type: 'warning',
//           message: 'Oops, something went wrong!',
//           duration: 2500,
//           offset: 90
//         })
//       })
//   }
//   if (status === 'ACTIVE') {
//     MessageBox.confirm(
//       `Activated goals cannot be edited or used in a review`,
//       `Are you sure you want to activate the goal?`,
//       {
//         confirmButtonText: 'OK',
//         cancelButtonText: 'Cancel',
//         type: 'warning'
//       }
//     )
//       .then(() => {
//         executeMutation()
//       })
//       .catch(() => { })
//   } else {
//     executeMutation()
//   }
// }

const renderRightArrow = ({ nextSlide, slideCount, currentSlide }) => {
  if (currentSlide !== slideCount - 1) {
    return (
      <i
        className='goal-review__back__button icon icon-small-right'
        style={arrowStyle}
        onClick={nextSlide}
      />
    )
  } else return null
}

const renderLeftArrow = ({ previousSlide, currentSlide }) => {
  if (currentSlide !== 0) {
    return (
      <i
        className='goal-review__back__button icon icon-small-right icon-rotate-180'
        style={arrowStyle}
        onClick={previousSlide}
      />
    )
  } else return null
}

export default ({ goals = [] }) => {
  const goalsPrepared = goals.some(
    ({ status, autogenerated }) =>
      !autogenerated || status === 'READY FOR REVIEW'
  )
  // const hasOwnGoals = goals.some(({ autogenerated }) => !autogenerated)
  const activeAndPastGoals = goals.filter(
    ({ status }) => status === 'ACTIVE' || status === 'PAST'
  )
  const autodrafts = goals.filter(
    ({ status, autogenerated }) => autogenerated && status === 'DRAFT'
  )

  if (activeAndPastGoals.length === 0) {
    return (
      <>
        {!goalsPrepared && (
          <>
            {autodrafts.length === 0 && (
              <div className='home__call-to-action'>
                <p>Nothing to do yet...</p>
                <h4>
                  You can start to track your learning here once you have goals
                  set
                  <br />
                  <strong>You can also try one of our Learning Paths!</strong>
                </h4>
                <br />
                <div>
                  <Link to={{ pathname: '/learning-paths' }}>
                    <Button type='primary' size='large'>
                      Browse our Learning Paths
                    </Button>
                  </Link>
                </div>
                <div style={{ marginTop: '12px' }}>
                  <Link to={{ pathname: '/goals/draft' }}>
                    <Button type='text' size='small'>
                      Draft your own goals
                    </Button>
                  </Link>
                </div>
              </div>
            )}
            {autodrafts.length > 0 && (
              <>
                <h4>
                  We have prepared draft goals for you using your previously set
                  learning preferences:
                </h4>
                <br />
                <Mutation
                  mutation={deleteGoal}
                  refetchQueries={['fetchUserGoals']}
                >
                  {deleteMutation => {
                    const draftGoalItems = autodrafts.map(draft => (
                      <GoalItem
                        key={draft._id}
                        {...draft}
                        // options={getGoalOptions({
                        //   status: draft.status,
                        //   handleDeletion: goalId => handleDeletion(deleteMutation, goalId),
                        //   handleMutating: variables => handleMutating(statusMutation, variables),
                        //   history
                        // })}
                        hideMeasureCount
                        showDevPlanButton
                        onDevPlanButtonClick={() =>
                          history.push(
                            `/plan/${draft._id}${
                              draft.developmentPlan &&
                              draft.developmentPlan.content.length +
                                draft.developmentPlan.mentors.length ===
                                0
                                ? '?edit=true'
                                : ''
                            }`,
                            {
                              dashboardDraft: true
                            }
                          )
                        }
                        showDeleteButton
                        handleDeletion={goalId =>
                          handleDeletion(deleteMutation, goalId)
                        }
                      />
                    ))

                    if (autodrafts.length > 1) {
                      return (
                        <Carousel
                          animation='zoom'
                          rightArrow={renderRightArrow}
                          leftArrow={renderLeftArrow}
                          renderBottomControls={null}
                        >
                          {draftGoalItems}
                        </Carousel>
                      )
                    } else {
                      return draftGoalItems
                    }
                  }}
                </Mutation>
              </>
            )}
            {/* {autodrafts.length === 1 && draftGoalItems}
            {autodrafts.length > 1 && (
              <>
                <Carousel
                  animation="zoom"
                  rightArrow={renderRightArrow}
                  leftArrow={renderLeftArrow}
                  renderBottomControls={null}
                >
                  {draftGoalItems}
                </Carousel>
                <h4 className="align-left">
                  Feel free to start preparing development plans to help you achieve the goals.
            </h4>
                <br />
              </>
            )} */}
          </>
        )}
        {goalsPrepared && (
          <Statement content="Your goals are currently in draft phase. When they're active, you'll be able to track your development plan here" />
        )}
      </>
    )
  }
  return null
}

/* <br />
When the goal is ready you can set it as <strong>Ready for review</strong> to review it together with your team leader
or <strong>Set as active</strong> to have it as a private goal (visible only to you). */

// {drafts.length > 1 && (
//   <>
//     <Mutation
//       mutation={setGoalStatus}
//       refetchQueries={'fetchUserDevelopmentPlan'}
//     >
//       {statusMutation => (
//
//       )}
//     </Mutation>
//     </>
// )}
